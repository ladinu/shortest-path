


rules = [
  DisableSyntax
  Disable
]

DisableSyntax {
  noAsInstanceOf = true
  noContravariantTypes = true
  noCovariantTypes = true
  noDefaultArgs = true
  noFinalVal = true
  noFinalize = true
  noImplicitConversion = true
  noImplicitObject = true
  noIsInstanceOf = true
  noNulls = true
  noReturns = true
  noSemicolons = true
  noTabs = true
  noThrows = true
  noUniversalEquality = true
  noUniversalEqualityMessage = "== and != are unsafe since they allow comparing two unrelated types. Use === or /== instead (import com.oracle.infy.wookiee.utils.implicits._)"
  noValInAbstract = true
  noValPatterns = true
  noVars = true
  noWhileLoops = true
  noXml = true
}


Disable.symbols = [

  // Disable scala Enumeration
  {
    symbol = "scala/Enumeration"
    message = "Scala Enumeration can cause performance problems due to its reliance on reflection. Use sealed abstract class/trait to model Enumerations"
  }

  // Disable .get
  {
    regex = {
      includes = [
        "^\\Qscala/Option#get().\\E$"
        "^\\Qscala/util/Try#get().\\E$"
        "^\\Qscala/util/Either.LeftProjection#get().\\E$"
        "^\\Qscala/util/Either.RightProjection#get().\\E$"
      ]
    }
    message = "Not a total function. Please use methods like .map(...), .getOrElse(...), .flatMap(...) etc. instead"
  }

  // Disable .head
  {
    regex = {
      includes = [
        "^\\Qscala/collection/IterableLike#head().\\E$"
        "^\\Qscala/collection/TraversableLike#head().\\E$"
        "^\\Qscala/collection/IterableLike#head().\\E$"
        "^\\Qscala/collection/Traversable#head().\\E$"
        "^\\Qscala/collection/IndexedSeqOptimized#head().\\E$"
        "^\\Qscala/collection/generic/GenericTraversableTemplate#head().\\E$"
      ]
    }
    message = ".head will throw if collection is empty. Please use .headOption instead"
  }

  // Disable .tail
  {
    regex = {
      includes = [
        "^\\Qscala/collection/Traversable#tail().\\E$"
        "^\\Qscala/collection/IterableLike#tail().\\E$"
        "^\\Qscala/collection/TraversableLike#tail().\\E$"
        "^\\Qscala/collection/IndexedSeqOptimized#tail().\\E$"
      ]
    }
    message = ".tail will throw if collection is empty. Please use .drop(1) instead"
  }

  // Disable .last
  {
    regex = {
      includes = [
        "^\\Qscala/collection/IterableLike#last().\\E$"
        "^\\Qscala/collection/Iterable#last().\\E$"
        "^\\Qscala/collection/TraversableLike#last().\\E$"
        "^\\Qscala/collection/IndexedSeqOptimized#last().\\E$"
      ]
    }
    message = ".last will throw if collection is empty. Please use .lastOption instead"
  }

  // Disable .init
  {
    regex = {
      includes = [
        "^\\Qscala/collection/IterableLike#init().\\E$"
        "^\\Qscala/collection/Iterable#init().\\E$"
        "^\\Qscala/collection/TraversableLike#init().\\E$"
        "^\\Qscala/collection/IndexedSeqOptimized#init().\\E$"
      ]
    }
    message = ".init will throw if collection is empty. Please use .dropRight(1) instead"
  }

  // Disable .reduce
  {
    regex = {
      includes = [
        "^\\Qscala/collection/TraversableOnce#reduce().\\E$"
      ]
    }
    message = ".reduce will throw if collection is empty. Please use .reduceOption or .fold instead"
  }

  // Disable .reduceLeft
  {
    regex = {
      includes = [
        "^\\Qscala/collection/TraversableOnce#reduceLeft().\\E$"
        "^\\Qscala/collection/LinearSeqOptimized#reduceLeft().\\E$"
        "^\\Qscala/collection/IndexedSeqOptimized#reduceLeft().\\E$"
      ]
    }
    message = ".reduceLeft will throw if collection is empty. Please use .foldLeft or .reduceLeftOption instead"
  }

  // Disable .reduceRight
  {
    regex = {
      includes = [
        "^\\Qscala/collection/TraversableOnce#reduceRight().\\E$"
        "^\\Qscala/collection/IterableLike#reduceRight().\\E$"
        "^\\Qscala/collection/LinearSeqOptimized#reduceRight().\\E$"
        "^\\Qscala/collection/IndexedSeqOptimized#reduceRight().\\E$"
      ]
    }
    message = ".reduceRight will throw if collection is empty. Please use .reduceRightOption or .foldRight instead"
  }

  // Disable .max
  {
    regex = {
      includes = [
        "^\\Qscala/collection/TraversableOnce#max().\\E$"
      ]
    }
    message = ".max will throw if collection is empty"
  }

  // Disable .maxBy
  {
    regex = {
      includes = [
        "^\\Qscala/collection/TraversableOnce#maxBy().\\E$"
      ]
    }
    message = ".maxBy will throw if collection is empty"
  }

  // Disable .min
  {
    regex = {
      includes = [
        "^\\Qscala/collection/TraversableOnce#min().\\E$"
      ]
    }
    message = ".min will throw if collection is empty"
  }

  // Disable .minBy
  {
    regex = {
      includes = [
        "^\\Qscala/collection/TraversableOnce#minBy().\\E$"
      ]
    }
    message = ".minBy will throw if collection is empty"
  }

  // Disable Thread.sleep
  {
    regex = {
      includes = [
        "^\\Qjava/lang/Thread#sleep().\\E$"
      ]
    }
    message = "Thread.sleep is blocking. Use a non-blocking method like a future"
  }

  // Disable Await.result
  {
    regex = {
      includes = [
        "^\\Qscala/concurrent/Await#result().\\E$"
      ]
    }
    message = "Await.result is blocking. Use a non-blocking methods like .map or .flatMap on the future"
  }

  // Disable Await.ready
  {
    regex = {
      includes = [
        "^\\Qscala/concurrent/Await#ready().\\E$"
      ]
    }
    message = "Await.ready is blocking. Use a non-blocking methods like .map or .flatMap on the future"
  }
]